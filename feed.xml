<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>JiaHao</title>
        <link>https://clark-cui.top/</link>
        <description>JiaHao' Blog</description>
        <lastBuildDate>Tue, 14 Mar 2023 07:28:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>JiaHao</title>
            <url>https://clark-cui.top/horse.svg</url>
            <link>https://clark-cui.top/</link>
        </image>
        <copyright>MIT License</copyright>
        <atom:link href="https://clark-cui.top/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Cosmos 详解]]></title>
            <link>https://clark-cui.top/posts/Cosmos详解.html</link>
            <guid>https://clark-cui.top/posts/Cosmos详解.html</guid>
            <pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[cosmos]]></description>
            <content:encoded><![CDATA[<h2>区块链现阶段的问题</h2>
<blockquote>
<p>本文内容主要来自《区块链架构与实现：Cosmos 详解》</p>
</blockquote>
<h3>开发周期长、技术门槛高</h3>
<p>比特币网络面临这样的问题，以太坊的出现解决了这一类问题，主要是用 evm 虚拟机和智能合约开发 dapp 的形式来实现去中心化应用</p>
<h3>资源消耗大、交易体验差</h3>
<p>比特币和以太坊都面临这样的问题，主要是工作量证明（pow）、中本聪共识协议造成的。</p>
<p>解决办法：可以用权益证明(pos)来替代 pow，用拜占庭容错共识协议(bft)或者实用拜占庭容错（practical Byzantine fault tolerance，PBFT）共识协议来代替中本聪共识协议。</p>
<h3>链上扩容难与跨链通信难</h3>
<p>比如 eth 链上部署了大量的 dapp 应用，都在争抢有限的计算资源。bch 通过增大每个区块的容量来提高链上交易处理速度的方式仅能带来有限的速度提高，eth2.0 的分片来实现链上交易并行处理的方式开发难度大，进展缓慢。所以构建多条链，并且多链通信是一种不错的解决方式。</p>
<p>跨链通信的 3 种实现机制：散列锁、公证人和中继</p>
<h2>Cosmos 的解决方案</h2>
<p>为每一个区块链应用单独构建一条区块链，使用 IBC 协议来连接所有的区块链，通过 Tendermint Core、Cosmos-SDK 提供了区块链应用的开发框架，自动继承 Tendermint 共识协议以及 PoS 机制</p>
<h3>Cosmos Hub</h3>
<p>是第一个基于 Cosmos 构建的区块链，链上资产是 ATOM</p>
<h3>Tendermint Core</h3>
<p>将区块链系统自下而上拆解为 3 层：对等网络通信层、共识协议层以及上层应用层。</p>
<ol>
<li>
<p>对等网络通信层：对等网络通信，确保交易、区块、共识协议的消息能够快速地在整个网络内广播。</p>
</li>
<li>
<p>共识协议层：构建新的区块，并通过共识协议确保全网就区块内容（交易、上层应用状态等）达成共识。</p>
</li>
<li>
<p>上层应用层：根据共识协议层构建的区块，通过 ABCI 与上层应用交互，执行区块中的交易并完成上层应用的状态更新</p>
</li>
</ol>
<blockquote>
<p>Tendermint Core 中提供了对等网络通信层与共识协议层的实现，并抽象出区块链应用接口（application blockchain interface，ABCI）来完成共识协议层与上层应用层的互动。</p>
</blockquote>
<p>使用的共识协议是 Tendermint 共识协议（pbft 共识协议改进而来）</p>
<h3>Cosmos-SDK</h3>
<p>Tendermint 团队构建了 Cosmos-SDK，实现了区块链场景中一系列的通用功能模块</p>
<ul>
<li>基础功能：账户管理与交易处理。</li>
<li>auth 模块管理系统中的所有账户。</li>
<li>bank 模块管理链上资产的转移。</li>
<li>辅助功能：创世区块管理、链上状态一致性检查等。</li>
<li>genutil 模块管理链的创世区块。</li>
<li>supply 模块负责链上资产总量的管理。</li>
<li>crisis 模块负责所有模块的不变量检查的管理。</li>
<li>params 模块负责所有模块的参数管理。</li>
<li>链上治理：基于提案的链上治理与网络升级。</li>
<li>gov 模块负责链上治理机制。</li>
<li>upgrade 模块负责链的升级。</li>
<li>PoS：链上资产抵押、链上惩罚和奖励。</li>
<li>staking 模块管理链上资产抵押。</li>
<li>slashing 模块负责对验证者的被动作恶行为进行惩罚。</li>
<li>evidence 模块负责对验证者的主动作恶行为进行惩罚。</li>
<li>mint 模块负责链上资产的铸造。</li>
<li>distribution 模块管理区块奖励的分发。</li>
<li>IBC 协议：基于中继机制的跨链协议。</li>
<li>ibc/core 模块负责跨链通信功能</li>
</ul>
<h3>基于 Tendermint Core 和 Cosmos-SDK 构建的区块链系统</h3>
<p><img src="../public/WeChatf903a2cdf12631278f330b086b4b2fd8.png" alt=""></p>
<h3>IBC 协议</h3>
<p>IBC 协议是为了跨链而诞生的，是基于中继机制而实现的协议，原理是任意两个希望跨链通信的区块链可以依赖密码学证明技术向对方链证明自身链上发生了特定的事件。两条链之间的网络通信通过中继者（relayer）完成。</p>
<p><img src="../public/WeChatd288ba57261eae3fef086b7f0abcff78.png" alt=""></p>
]]></content:encoded>
            <author>rongchuancui@gmail.com (JiaHao)</author>
        </item>
        <item>
            <title><![CDATA[DeFi科普]]></title>
            <link>https://clark-cui.top/posts/DeFi科普.html</link>
            <guid>https://clark-cui.top/posts/DeFi科普.html</guid>
            <pubDate>Sun, 01 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[DeFi基础知识]]></description>
            <content:encoded><![CDATA[<h2>什么是 DeFi</h2>
<p>DeFi 是 Decentralized Finance 的缩写，也就是去中心化金融，大概意思就是把一些传统的金融产品复制到了区块链上，比如给 makerDao 这个 DApp,用户可以用它通过质押自己的数字资产，然后获得收益，整个流程通过智能合约控制。<br>
但是也不仅仅是传统金融，还要打通区块链和现实世界，所以就有了合成资产（Synthetic Assets）和语言机(Oracle)。</p>
<h3>合成资产</h3>
<p>简单来讲，就是抵押一种现实资产从而获得另一种在链上的资产。比如美元是现实资产，稳定币 USDT 就是泰达公司通过抵押美元而得到的合成资产。通过这个工具，我们可以把现实资产映射到链上。</p>
<h3>预言机</h3>
<p>它是把现实世界的数据传输到区块链上的通道。许多 DeFi 智能合约的运转需要现实数据输入。比如上面提到 makerDao 就需要获取以太坊的实时价格。有了预言机，DeFi 才能和现实世界互通。</p>
<h3>DeFi 的优势与劣势</h3>
<p>DeFi 有透明，去中心化，能 24h 交易，没有中间商赚差价的优势。但是，因为 DeFi 的透明机制，智能合约的代码是开源的，也就更容易被黑客攻击。</p>
<h2>EVM 是什么</h2>
<p>是 Ethereum Virtual Machine 的缩写，翻译过来就是以太坊虚拟机，是一种虚拟机，用来运行智能合约代码。以太坊上有许多的智能合约，在满足条件后就会自动执行。之所以需要虚拟机，是因为节点的环境不同，为了保证智能合约运行结果的一致，所以需要一个虚拟机，统一合约代码的运行环境。okc 上也上了 evm，所以 eth 上的智能合约都能轻松地在 okc 上部署</p>
<h2>NFT 是什么</h2>
<p>是 Non-Fungible Tokens 的缩写，翻译为非同质化通证。非同质化对应同质化，比特币就是同质化通证，比如，我的一枚比特币与小张的一枚比特币没有任何区别，同时，我也能把自己的一枚比特币分割成 10 份，每份 0.1 枚。而非同质化通证却不是，每个 NFT 都有一个独特且唯一的标识，不可复制，最小单位是 1，不可分割。</p>
<h3>如何使用 NFT</h3>
<p>把图片上传到 NFT 平台，填写资产说明，并连接钱包，智能合约会生成一份代表这个图片所有权的 NFT 通证，并发送到你的钱包地址，然后就可以在这个平台把这个 NFT 上架拍卖。之后的每一次转卖，作者都会获得一定比例的分成。</p>
<h3>NFT 的应用</h3>
<p>不只是图片，各种数字产品都可以。还可以把一份收藏品分成很多份，每一份生成 1 个 NFT，这样就可以大大降低准入门槛。</p>
<h2>DeFi 是如何帮你借贷的</h2>
<p>DeFi 借贷，是将借贷协议用智能合约自动执行，通过协议来匹配借方和贷方，在质押确认后及时划转资产。</p>
<ol>
<li>
<p>最火热的流动池模式<br>
DeFi 借贷系统相当一一个公开透明，自动运营的资金池，资金池中的水是加密资产，用户存入、归还加密资产时就相当于有水流汇入，用户取出存款或借款时，就有水流出。<br>
你存入加密资产后，会有一个 aToken，就跟存折一样，当你决定取款时，向 DeFi 系统归还取款凭证，就可以收回原来存入的资产并获得收益。另外，你还可以把这个存款凭证 aToken 放在二级市场交易。<br>
在借款时，要向 DeFi 系统抵押，并且要超额抵押，假设最低抵押率是 150%，那么想要借 100 元就要抵押 150 元的存款凭证，这是为了确保资金池不会因为借款而枯竭。另外，当你以加密资产 A 作为抵押，借出加密资产 B，当币价波动，A 的价格下降或者 B 的价格上升时，抵押率就会下降，为了保证借出去的加密资产 B 始终有足额担保，DeFi 系统设置了清算过程，它设定了一个清算值（也是百分比），当抵押率低于这个清算值时，DeFi 系统会触发清算，并将你抵押的部分加密资产 A 冻结拍卖，这个时候其他人可以用折扣价，用加密资产 B 买下这部分抵押物，相当于系统帮你做了偿还的操作，与此同时，系统会对你收取罚金作为处罚。</p>
</li>
<li>
<p>闪电贷<br>
可以在不卖出加密资产的前提下，借出我们急需的加密资产。但超额质押的机制，限制了我们的资金利用率，所以有了无抵押贷款——闪电贷，条件是在同一区块链交易结束前进行偿还，不然这个借贷就不被承认。举个例子，你使用 1 次共享单车，视为 1 次区块链交易，在你扫码开锁时，可以向单车平台借一笔款，期间你可以随意使用这笔钱，当骑行结束关锁时，你必须向平台还款。</p>
</li>
</ol>
<p>优点是过程透明简单，没有繁琐的审核，任何人都能借贷。缺点是智能合约代码开源，容易被黑客抓住漏洞进行攻击，损失无法挽回。基 eth 协议的 DeFi 借贷手续费较高，链上拥堵时有发生，降低用户体验，极端情况下会导致借款人来不及补充抵押物而遭到清算。</p>
<h2>什么是去中心化交易所</h2>
<p>中心化交易所（CEX）：单个买方和卖方难以匹配，所以需要一个撮合平台，以挂单的形式，平台根据价格和时间来均衡排序，帮助买卖双方的匹配</p>
<p>去中心化交易所（DEX）：Decentralized Exchange 的缩写。有人探索把交易所放在链上，于是诞生了 Dex。通过智能合约进行订单撮合，并进行交易结算，交易的全部流程也都会通过智能合约记录到区块链上。</p>
<p>早期的去中心化交易所，会把买卖双方的挂单存储在区块链上的订单簿上，并在区块链上进行撮合和交易结算。卖方填写订单请求，并用私钥签名后提交到区块链上锁定，买方在挂单中进行选择，确认后，由智能合约对这两者的交易需求进行匹配，交易成功后在链上进行结算。也就是说，交易时，挂单、交易结算、提现等操作都是由智能合约在链上完成的，也就意味着交易时需要时间等待的步骤（在区块链上被矿工确认），而且需要给矿工支付 Gas 费，最后导致又慢又贵，体验很差。</p>
<p>第二代去中心化交易所，开始把为买卖双方匹配最佳订单的撮合过程放在链下，只把最后的撮合结果提交到区块链上，由智能合约完成最后的结算。这种链下订单簿的模式，减少了链上确认的频次，但依然不能满足即时交易的需求，也在一定程度上牺牲了去中心化的优势。</p>
<p>新的去中心化交易所，引入了 AMM（Automated market maker）机制，也就是自动做市商模式，它直接根据算法，计算出两个或几个资产之间的汇率，买卖双方不再进行订单匹配，而是通过智能合约和流动性资金池进行交易。举个例子，一个 AMM 菜市场，有一个台子，左边是一堆大米，右边是一堆钱，中间是一个机器人。卖大米的人来了，他只要把自己的大米放在左边，机器人根据函数计算出价格，并告诉他可以从右边拿走多少钱。买大米的人来了，他只要把钱放在右边，机器人会根据函数计算结果，告诉他可以从左边拿走多少大米。这样就实现了不用挂单等待的即时交易。Uniswap 就是这么干的。</p>
<p>去中心化交易所，不需要开户和身份核验就能使用，也不用将资产托管给交易所，资产安全更有保障。但是缺点是链上交易受到区块链网络性能的影响，AMM 机制解决了去中心化交易所链上交易不足，流动性差的问题，但也带来了滑点、无偿损失的问题。</p>
<h3>关于 AMM 自动化做市商的一切</h3>
<p>它根据算法，计算出几个资产之间的汇率，用户根据汇率来兑换资产， 流动性资金池是其中的关键。你只需要把自己的加密资产按比例投入流动性池中，就可以为他提供流动性。流动性资金池越大，大家的交易就越方便。<br>
为了激励大家提供流动性，有些项目方会给流动性提供者分发项目的治理代币，这就是流动性挖矿。你可以参与流动性挖矿赚取收益，但这并不是稳赚不赔的生意，你还要小心滑点和无偿损失。<br>
AMM 模式的交易所，汇率计算是其中的要点，它的原理是一个函数，以 uniswap 为例，它使用的函数是 x *y=k,x 和 y 分表代表了不同资产在交易所中的数量，k 是约定好的常数。初始阶段，uniswap 两个兑换池的资金价值相等，举个例子，假设苹果和梨都是 1 元，初始有 10 个苹果，10 个梨，所以 k=x *y=10 *10=100,对于任何交易，uniswap 都要保证池中的苹果 *香蕉=100。所以当你卖 1 个苹果给 uniswap,池子里就有了 11 个苹果，为了保证 k=100，所以池子里香蕉的数量就是 9.09，那么相当于你卖出 1 个苹果，得到了 0.91 个香蕉。以前，1 个苹果能换 1 个香蕉，现在 1 个苹果却只换到了 0.91 个香蕉，这少拿走的 0.09 个香蕉，就是滑点导致的。这也是这个公式的缺点，当一个币对池，其中一个币被卖入的越多，那这个币就越便宜，同理，被买走的越多就越贵。滑点与交易池的大小有关，比如刚才的例子，如果是 100 个苹果，100 个香蕉，那么拿 1 个苹果就能换 0.99 个香蕉，滑点是 0.01。<br>
然而市场上币价波动性大，假如市场上苹果价格不断上涨，然而这个流动性池中苹果的价格还是相对比较便宜的，所以就会有人不断地在流动性池中充入香蕉换取苹果来套利。<br>
假设还是之前那个 10 *10 的模型，苹果的市场价格涨到了 5 元，香蕉仍然是 1 元。所以就有人在这个过程中不断用香蕉换苹果套利，然后池子里就剩下 5 个苹果，20 个香蕉，k 还是 100。此时池子里的价值是 5 *5+20 *1=45 元。假设池子的流动性都是你添加的，相当于你参加了流动性挖矿，那么你的资产价值就是 45 元。但如果你不参与流动性挖矿，你原来的 10 个苹果，10 个香蕉都还在，那么此时价值就是 10 *5+10 *1=60 元，参与流动性挖矿反倒赚的少了，这 15 美元的差价就是无常损失。uniswap 的无常损失情况可以通过曲线图快速知晓（losses to liquidity providers due to price variation）,展示了价格变化多少时，无偿损失会有多少。</p>
<p>不同的去中心化交易所，会选择不同的函数来减少滑点和无偿损失。</p>
]]></content:encoded>
            <author>rongchuancui@gmail.com (JiaHao)</author>
        </item>
        <item>
            <title><![CDATA[mac外接显示器]]></title>
            <link>https://clark-cui.top/posts/mac外接显示器.html</link>
            <guid>https://clark-cui.top/posts/mac外接显示器.html</guid>
            <pubDate>Fri, 15 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[mac外接显示器的坑]]></description>
            <content:encoded><![CDATA[<h2>背景</h2>
<blockquote>
<p>我是不喜欢用 mac，但是最近想给 Logseq 提代码，但是 windows 上跑不起来，discord 问了一圈，发现开发者都是用的 mac，所以他们就没有配 windows 的开发环境...</p>
<p>然后试了 docker，但是在 windows 上跑一个 Playwright 的测试就是跑不起来...也 debug 不了，实在没辙了</p>
<p>默默拿起公司配的 macbook，几分钟配好环境...真的方便，不得不承认，但是插上显示器的瞬间，我傻眼了，咋这么糊啊，我 2k 的显示器看着像 720p...</p>
</blockquote>
<h2>方案</h2>
<blockquote>
<p>遇事不决，先 Google,哦~果然是 known issue.</p>
</blockquote>
<p>大概调研了下，大致就是改下 mac 的配置文件，但是得进恢复模式改，类似 PC 的 bios 设置吧，有写好的脚本，直接用就行，比较坑的一点是如果系统更新，就得再来一遍。</p>
<p><a href="https://zhuanlan.zhihu.com/p/227788155?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=1114657556978700288&amp;utm_campaign=shareopn">放一篇写的不错的教程</a></p>
]]></content:encoded>
            <author>rongchuancui@gmail.com (JiaHao)</author>
        </item>
        <item>
            <title><![CDATA[建站日记]]></title>
            <link>https://clark-cui.top/posts/buildSite.html</link>
            <guid>https://clark-cui.top/posts/buildSite.html</guid>
            <pubDate>Fri, 10 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[这是服务器建站的一系列记录，早期的版本已经遗失，这里是目前的一些实践与想法]]></description>
            <content:encoded><![CDATA[<h3>ucloud 服务器</h3>
<ul>
<li>主站和博客在/usr/local/src</li>
<li>blog-clark-cui 与 homesite 都开启了自动上传 action 用 ftp 连接服务器上传的，服务器里的.git-ftp.log 文件就是记录的</li>
</ul>
<h3>关于图床的思考</h3>
<ul>
<li>图床不是必需品，感觉没啥用
<ul>
<li>防盗链</li>
<li>http</li>
<li>开启水印</li>
<li>图形页面方便管理（没有哪一家实现了）</li>
<li>删除（操作繁琐）</li>
</ul>
</li>
<li>硬是要用的话就用现有的七牛云吧，都配置好了，配合 picgo</li>
</ul>
<h3>关于云托管的思考</h3>
<ul>
<li>腾讯云静态托管可用
<ul>
<li>有自动 https 域名</li>
<li>但是依托空间，只有第一个空间免费</li>
<li>如果有动态需求，只能用他的云数据库和云函数，体验不好</li>
</ul>
</li>
<li>别的主机商的托管
<ul>
<li>国内访问慢</li>
</ul>
</li>
<li>总结
<ul>
<li>可以做文档类的托管，主站还是不必了。不过都弄主站了，多弄个 nginx 托管似乎也没啥问题</li>
</ul>
</li>
</ul>
<h3>关于 tsl 证书</h3>
<ul>
<li>使用 cerbot,注意相关东西要装在 docker 里，Nginx 就在 docker 里，全局是没有的</li>
</ul>
<h3>关于 vitepress</h3>
<ul>
<li>新版的 vuepress 和 vitepress 类似，但是 vitepress 不支持插件系统</li>
<li>使用 vitepress 重构主站，目前已经完成首页，还需要完成 blog 页
<ul>
<li>使用 nodejs 获取本地文件并处理头部参考 <a href="https://juejin.cn/post/6896382276389732359">掘金</a></li>
<li>具体案例参考 <a href="https://github.com/airene/vitepress-blog-pure">vitepress-blog-pure</a></li>
</ul>
</li>
<li>sidebar 使用 slug 组件，在 vitepress-for-component 里
<ul>
<li>完成品参考 <a href="https://github.com/dewfall123/vitepress-for-component">vitepress-for-component</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
            <author>rongchuancui@gmail.com (JiaHao)</author>
        </item>
    </channel>
</rss>